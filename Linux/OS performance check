
---

## **1. `top` - Real-Time Process Monitoring**  
### **Command:**
```bash
top
```
### **Example Output:**
```
top - 14:23:05 up 5 days,  2:33,  1 user,  load average: 0.23, 0.17, 0.19
Tasks: 200 total,   1 running, 199 sleeping,   0 stopped,   0 zombie
%Cpu(s):  3.2 us,  1.1 sy,  0.0 ni, 95.5 id,  0.2 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem :  8012348 total,  1245680 free,  4789604 used,  1977064 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.  2512344 avail Mem 

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND  
 1345 root      20   0  404912  32208   7564 S   2.3  0.4   0:01.55 apache2  
 1123 mysql     20   0 1235640 152000   9300 S   1.1  1.9   4:23.98 mysqld   
 1435 user1     20   0  234012   5768   4760 S   0.7  0.1   0:00.87 bash     
 1598 user1     20   0  273460   8128   5928 R   0.3  0.1   0:00.03 top      
```
### **Explanation of Fields:**
- **Header Section:**
  - `14:23:05` → Current system time.
  - `up 5 days, 2:33` → System uptime.
  - `1 user` → Number of logged-in users.
  - `load average: 0.23, 0.17, 0.19` → Load averages over 1, 5, and 15 minutes.

- **CPU Usage:**
  - `us` (User): % of CPU used by user processes.
  - `sy` (System): % of CPU used by system (kernel) processes.
  - `ni` (Nice): % of CPU used by low-priority tasks.
  - `id` (Idle): % of time CPU is idle.
  - `wa` (I/O wait): % of time CPU is waiting for I/O operations.

- **Memory Usage:**
  - `total` → Total memory available.
  - `free` → Unused memory.
  - `used` → Used memory.
  - `buff/cache` → Memory used for caching.

- **Process Table:**
  - `PID` → Process ID.
  - `USER` → Process owner.
  - `PR` → Priority.
  - `NI` → Nice value (lower is higher priority).
  - `VIRT` → Virtual memory used.
  - `RES` → Resident memory in RAM.
  - `%CPU` → CPU usage percentage.
  - `%MEM` → Memory usage percentage.
  - `TIME+` → Total CPU time used.
  - `COMMAND` → Running process name.

---

## **2. `free` - Memory Usage Monitoring**  
### **Command:**
```bash
free -m
```
### **Example Output:**
```
              total        used        free      shared  buff/cache   available
Mem:           7824        5248        1024         156        1552        1948
Swap:          2048           0        2048
```
### **Explanation of Fields:**
- `total` → Total system memory.
- `used` → Memory in use.
- `free` → Unused memory.
- `shared` → Memory shared between processes.
- `buff/cache` → Memory used for cache and buffers.
- `available` → Estimated memory available for new applications.

---

## **3. `vmstat` - System Performance Monitoring**  
### **Command:**
```bash
vmstat 2 5
```
### **Example Output:**
```
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0      0  10240   1456   5896    0    0     1     1  105  210  3  1 96  0  0
 0  0      0  10228   1460   5900    0    0     0     2  110  220  2  1 97  0  0
```
### **Explanation of Fields:**
- **`r` (Run queue):** Number of processes waiting for CPU.
- **`b` (Blocked):** Number of processes blocked.
- **Memory:**
  - `swpd` → Swap memory in use.
  - `free` → Free RAM.
  - `buff/cache` → Buffer memory used.
- **Swap:**
  - `si` → Swap memory in.
  - `so` → Swap memory out.
- **I/O:**
  - `bi` → Blocks read from disk.
  - `bo` → Blocks written to disk.
- **CPU Usage:**
  - `us` → User CPU usage.
  - `sy` → System CPU usage.
  - `id` → Idle CPU.
  - `wa` → Wait time for I/O.

---

## **4. `iostat` - Disk I/O Statistics**  
### **Command:**
```bash
iostat -x 2 5
```
### **Example Output:**
```
Device:         rrqm/s   wrqm/s     r/s     w/s   rkB/s   wkB/s  await  svctm  %util
sda               0.05     1.02    2.51    3.26   60.32   75.48   12.3   0.85   4.2
```
### **Explanation of Fields:**
- `rrqm/s` → Read requests merged per second.
- `wrqm/s` → Write requests merged per second.
- `r/s` → Read operations per second.
- `w/s` → Write operations per second.
- `rkB/s` → Kilobytes read per second.
- `wkB/s` → Kilobytes written per second.
- `await` → Average wait time for I/O.
- `svctm` → Service time per request.
- `%util` → Disk usage percentage (100% means fully utilized).

---

## **5. `sar` - Historical Performance Monitoring**  
### **Command:**
```bash
sar -u 2 5
```
### **Example Output:**
```
14:23:01     CPU     %user     %nice   %system   %iowait    %steal     %idle
14:23:03     all      3.2       0.0       1.1       0.2        0.0      95.5
14:23:05     all      2.9       0.0       1.2       0.1        0.0      95.8
```
### **Explanation of Fields:**
- `%user` → CPU used by user processes.
- `%nice` → CPU used by nice-priority processes.
- `%system` → CPU used by kernel.
- `%iowait` → CPU waiting for I/O.
- `%steal` → CPU stolen by hypervisor.
- `%idle` → CPU idle percentage.

---

## **Conclusion**
| Command  | Monitors |
|----------|----------|
| `top`    | Real-time process and resource usage |
| `free`   | Memory usage |
| `vmstat` | CPU, memory, I/O performance |
| `iostat` | Disk performance |
| `sar`    | Historical performance |

Would you like assistance in analyzing specific outputs?


--- 
Kill -9 <pid>
