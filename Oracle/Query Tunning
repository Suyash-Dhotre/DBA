--# Long running query details

SELECT
    s.sid,
    s.serial#,
    s.username,
    s.status,
    s.osuser,
    s.machine,
    s.program,
    COALESCE(s.sql_id, 'NO SQL') AS sql_id,
    q.plan_hash_value,  -- Added plan hash value
    s.event,
    s.logon_time,
    ROUND((SYSDATE - s.logon_time) * 24 * 60, 2) AS minutes_running,
    q.sql_text
FROM
    v$session s
LEFT JOIN
    v$sqlarea q
ON
    s.sql_id = q.sql_id
WHERE
    s.status = 'ACTIVE'
    AND s.username IS NOT NULL
    AND s.last_call_et > 60 * 10  -- Queries running for more than 10 minutes
    AND s.program NOT LIKE '%ORACLE%'  -- Exclude Oracle internal processes
ORDER BY
    s.last_call_et DESC;



--# Check AWR Snapshot take intervals and retention 

-- Check retention and interval
SELECT
    snap_interval,      -- Frequency of AWR snapshots (e.g., every 1 hour)
    retention           -- How long snapshots are retained (e.g., 8 days)
FROM
    dba_hist_wr_control;

**Note:
Default Settings (Oracle):
  - Default Interval is every 1 hour (`+00000 01:00:00.0`).  
  - In Oracle 10g/11g, the default retention is 7 days.  
  - In Oracle 12c/19c/21c, the default retention is 8 days.
  - Snapshots older than the retention period are automatically purged by the Oracle maintenance tasks

-- eg of changing retaintion and interval

BEGIN
  DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSHOT_SETTINGS(
    retention  => 11520,   -- 8 days (8*24*60 minutes)
    interval   => 60        -- 60 minutes
  );
END;
/

BEGIN
  DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSHOT_SETTINGS(
    retention  => 11520,   -- 8 days (8*24*60 minutes)
    interval   => 60        -- 60 minutes
  );
END;
/

-- Check AWR usage
SELECT
    SUM(space_used) / 1024 / 1024 AS space_used_mb
FROM
    dba_hist_snapshot;

-- Check snapshots id with Time frame

SELECT snap_id,
       TO_CHAR(begin_interval_time, 'YYYY-MM-DD HH24:MI:SS') AS begin_time,
       TO_CHAR(end_interval_time, 'YYYY-MM-DD HH24:MI:SS') AS end_time
FROM dba_hist_snapshot
WHERE begin_interval_time >= TO_DATE('2025-02-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
  AND end_interval_time <= TO_DATE('2025-02-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
ORDER BY snap_id;



--# Check historical execution of sql_id with plan_hash_value

SELECT 
    h.begin_interval_time AS snapshot_start_time,
    h.end_interval_time AS snapshot_end_time,
    s.sql_id,
    s.plan_hash_value,
    s.executions_delta AS executions_in_snapshot,
    s.elapsed_time_delta / 1e6 AS elapsed_time_seconds,
    s.cpu_time_delta / 1e6 AS cpu_time_seconds,
    s.elapsed_time_delta / NULLIF(s.executions_delta, 0) / 1e6 AS avg_elapsed_time_seconds
FROM 
    dba_hist_sqlstat s
JOIN 
    dba_hist_snapshot h
ON 
    s.snap_id = h.snap_id
AND 
    s.dbid = h.dbid
AND 
    s.instance_number = h.instance_number
WHERE 
    s.sql_id = '9qytqh2xab7hr'
ORDER BY 
    h.begin_interval_time;


-- OR

SELECT
    h.begin_interval_time AS snapshot_start_time,
    h.end_interval_time AS snapshot_end_time,
    s.sql_id,
    s.plan_hash_value,
    s.executions_delta AS executions_in_snapshot,
    ROUND(s.elapsed_time_delta / 1e6, 2) AS elapsed_time_seconds,  -- Rounded to 2 decimal places
    ROUND(s.cpu_time_delta / 1e6, 2) AS cpu_time_seconds,          -- Rounded to 2 decimal places
    ROUND(s.elapsed_time_delta / NULLIF(s.executions_delta, 0) / 1e6, 4) AS avg_elapsed_time_seconds
    --, (h.end_interval_time - h.begin_interval_time) * 86400 AS snapshot_duration_seconds  -- Added snapshot duration
FROM
    dba_hist_sqlstat s
JOIN
    dba_hist_snapshot h
    ON s.snap_id = h.snap_id
    AND s.dbid = h.dbid
    AND s.instance_number = h.instance_number
WHERE
    s.sql_id = '9qytqh2xab7hr'
    AND h.begin_interval_time >= SYSDATE - 30  -- Optional: Filter by time window (e.g., last 30 days)
ORDER BY
    h.begin_interval_time;


--# list of all PHVs their execution count and resource consumption
----------------------------------------------------------------------------------------
--
-- File name:   sqlflip1.sql
--
-- Purpose:     Provides list of all PHVs their execution count and resource consumption
-- I/P : 
-- Enter value for earliest_snap_id: 1500 -- default 0 -- all snapshots 
-- Enter value for min_stddev: 3  -- default 2
-- Enter value for min_etime: 0.5  -- default 0.1
--
---------------------------------------------------------------------------------------
set lines 155
col execs for 999,999,999
col min_etime for 999,999.99
col max_etime for 999,999.99
col avg_etime for 999,999.999
col avg_lio for 999,999,999.9
col norm_stddev for 999,999.9999
col begin_interval_time for a30
col node for 99999
break on plan_hash_value on startup_time skip 1
select * from (
select sql_id, sum(execs), min(avg_etime) min_etime, max(avg_etime) max_etime, stddev_etime/min(avg_etime) norm_stddev
from (
select sql_id, plan_hash_value, execs, avg_etime,
stddev(avg_etime) over (partition by sql_id) stddev_etime 
from (
select sql_id, plan_hash_value,
sum(nvl(executions_delta,0)) execs,
(sum(elapsed_time_delta)/decode(sum(nvl(executions_delta,0)),0,1,sum(executions_delta))/1000000) avg_etime
-- sum((buffer_gets_delta/decode(nvl(buffer_gets_delta,0),0,1,executions_delta))) avg_lio
from DBA_HIST_SQLSTAT S, DBA_HIST_SNAPSHOT SS
where ss.snap_id = S.snap_id
and ss.instance_number = S.instance_number 
and executions_delta > 0
and elapsed_time_delta > 0
and s.snap_id > nvl('&earliest_snap_id',0)
group by sql_id, plan_hash_value
)
)
group by sql_id, stddev_etime
)
where norm_stddev > nvl(to_number('&min_stddev'),2)
and max_etime > nvl(to_number('&min_etime'),.1)
order by norm_stddev
/


--# Compare multiple plan_hash_value for specific sql_id
----------------------------------------------------------------------------------------
--
-- File name:   sqlflip2.sql
--
-- Purpose:     Attempts to find SQL statements with plan instability.
-- I/P:
-- Enter value for sql_id: 8hq3n4f4s7y2b -- sql_id
--
---------------------------------------------------------------------------------------
set lines 155
col execs for 999,999,999
col etime for 999,999,999.9
col avg_etime for 999,999.999
col avg_cpu_time for 999,999.999
col avg_lio for 999,999,999.9
col avg_pio for 9,999,999.9
col begin_interval_time for a30
col node for 99999
break on plan_hash_value on startup_time skip 1
select sql_id, plan_hash_value, 
sum(execs) execs, 
-- sum(etime) etime, 
sum(etime)/sum(execs) avg_etime, 
sum(cpu_time)/sum(execs) avg_cpu_time,
sum(lio)/sum(execs) avg_lio, 
sum(pio)/sum(execs) avg_pio
from (
select ss.snap_id, ss.instance_number node, begin_interval_time, sql_id, plan_hash_value,
nvl(executions_delta,0) execs,
elapsed_time_delta/1000000 etime,
(elapsed_time_delta/decode(nvl(executions_delta,0),0,1,executions_delta))/1000000 avg_etime,
buffer_gets_delta lio,
disk_reads_delta pio,
cpu_time_delta/1000000 cpu_time,
(buffer_gets_delta/decode(nvl(buffer_gets_delta,0),0,1,executions_delta)) avg_lio,
(cpu_time_delta/decode(nvl(executions_delta,0),0,1,executions_delta)) avg_cpu_time
from DBA_HIST_SQLSTAT S, DBA_HIST_SNAPSHOT SS
where sql_id = nvl('&sql_id','4dqs2k5tynk61')
and ss.snap_id = S.snap_id
and ss.instance_number = S.instance_number 
-- and executions_delta > 0
)
group by sql_id, plan_hash_value
order by 5
/




