--# Long running query details

SELECT
    s.sid,
    s.serial#,
    s.username,
    s.status,
    s.osuser,
    s.machine,
    s.program,
    COALESCE(s.sql_id, 'NO SQL') AS sql_id,
    q.plan_hash_value,  -- Added plan hash value
    s.event,
    s.logon_time,
    ROUND((SYSDATE - s.logon_time) * 24 * 60, 2) AS minutes_running,
    q.sql_text
FROM
    v$session s
LEFT JOIN
    v$sqlarea q
ON
    s.sql_id = q.sql_id
WHERE
    s.status = 'ACTIVE'
    AND s.username IS NOT NULL
    AND s.last_call_et > 60 * 10  -- Queries running for more than 10 minutes
    AND s.program NOT LIKE '%ORACLE%'  -- Exclude Oracle internal processes
ORDER BY
    s.last_call_et DESC;



--# Check AWR Snapshot take intervals and retention 

-- Check retention and interval
SELECT
    snap_interval,      -- Frequency of AWR snapshots (e.g., every 1 hour)
    retention           -- How long snapshots are retained (e.g., 8 days)
FROM
    dba_hist_wr_control;

**Note:
Default Settings (Oracle):
  - Default Interval is every 1 hour (`+00000 01:00:00.0`).  
  - In Oracle 10g/11g, the default retention is 7 days.  
  - In Oracle 12c/19c/21c, the default retention is 8 days.
  - Snapshots older than the retention period are automatically purged by the Oracle maintenance tasks

-- Check AWR usage
SELECT
    SUM(space_used) / 1024 / 1024 AS space_used_mb
FROM
    dba_hist_snapshot;

-- eg of changing retaintion and interval

BEGIN
  DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSHOT_SETTINGS(
    retention  => 14 * 1440,    -- 14 days (in minutes)
    interval   => 30            -- 30 minutes
  );
END;
/

BEGIN
  DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSHOT_SETTINGS(
    retention  => 11520,   -- 8 days (8*24*60 minutes)
    interval   => 60        -- 60 minutes
  );
END;
/



--# Check historical execution of sql_id with plan_hash_value

SELECT 
    h.begin_interval_time AS snapshot_start_time,
    h.end_interval_time AS snapshot_end_time,
    s.sql_id,
    s.plan_hash_value,
    s.executions_delta AS executions_in_snapshot,
    s.elapsed_time_delta / 1e6 AS elapsed_time_seconds,
    s.cpu_time_delta / 1e6 AS cpu_time_seconds,
    s.elapsed_time_delta / NULLIF(s.executions_delta, 0) / 1e6 AS avg_elapsed_time_seconds
FROM 
    dba_hist_sqlstat s
JOIN 
    dba_hist_snapshot h
ON 
    s.snap_id = h.snap_id
AND 
    s.dbid = h.dbid
AND 
    s.instance_number = h.instance_number
WHERE 
    s.sql_id = '9qytqh2xab7hr'
ORDER BY 
    h.begin_interval_time;


-- OR

SELECT
    h.begin_interval_time AS snapshot_start_time,
    h.end_interval_time AS snapshot_end_time,
    s.sql_id,
    s.plan_hash_value,
    s.executions_delta AS executions_in_snapshot,
    ROUND(s.elapsed_time_delta / 1e6, 2) AS elapsed_time_seconds,  -- Rounded to 2 decimal places
    ROUND(s.cpu_time_delta / 1e6, 2) AS cpu_time_seconds,          -- Rounded to 2 decimal places
    ROUND(s.elapsed_time_delta / NULLIF(s.executions_delta, 0) / 1e6, 4) AS avg_elapsed_time_seconds
    --, (h.end_interval_time - h.begin_interval_time) * 86400 AS snapshot_duration_seconds  -- Added snapshot duration
FROM
    dba_hist_sqlstat s
JOIN
    dba_hist_snapshot h
    ON s.snap_id = h.snap_id
    AND s.dbid = h.dbid
    AND s.instance_number = h.instance_number
WHERE
    s.sql_id = '9qytqh2xab7hr'
    AND h.begin_interval_time >= SYSDATE - 30  -- Optional: Filter by time window (e.g., last 30 days)
ORDER BY
    h.begin_interval_time;


--

