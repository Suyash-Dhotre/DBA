https://github.com/icyb3r-code/DBAdmin/blob/master/Oracle/Contents/Oracle19c_TDE/README.md
https://docs.oracle.com/en/database/oracle/oracle-database/19/asoag/using-transparent-data-encryption-with-other-oracle-features.html#GUID-A1BC1857-786C-497C-AE20-122B8522FC31
https://docs.oracle.com/en/database/oracle/oracle-database/18/asoag/managing-keystore-and-tde-master-encryption-key.html#GUID-6CB2C353-44C5-46B5-9CDB-2B4D9D0841BC



# Oracle19c TDE (Transparent Data Encryption)
===================
## 1. Introduction 
===================
TDE (Transparent Data Encryption) is an Oracle Advance security feature that help us to protect our data from being stolen.
So you may ask why Encryption?
Encryption will secure your data by prevent the attacker to steal your data if he gain access through:

	-Direct access to database storage 
	-Theft of database backup 
	-Compromise of database export

======================================
## 2. Type of TDE Encryption Targets 
======================================
I) TableSpace 
	-Encrypt All Datafiles belong to the tablespace
	-Tablespace Key is same for Encrypted datafiles within that Tablespace
	-Default Algorithm AES 128

II) Column 
	-Encrypt By column in Table 
	-Table Key is same for all encrypted columns within that table.
	-Default algorithm: AES 192

  
==========================
## 3. TDE Key Architecture 
==========================
I) Master Key 
	- Master Key is a Key stored outside the Database 
	- Master Key is a Key Encrypting key known as (MEK) Master Encryption Key 
	- Master Key used to Encrypt the Table and Tablespace keys 
	- Master Key can be generated By wallet or Key Vault or any other supported HSM  (Hardware Security Modules)
	
II) Tablespace Key
	- Stored and Visible in control file and Datafile Headers 
	- Tablespace key used to encrypt datafiles within the tablespace 
	- Tablespace key encrypted by the master key 
	
III) Table Key 
	- Stored and Visible in table data Dictionary 
	- Its encrypted by master key 
	- Table key used to encrypt columns data within the table 
	


##########################################
## 4. TDE Configuration Without Vault Key
##########################################

### 4.1 TDE with wallet
 - To work with wallet you need to know few things about it:
	- PKCS#12 encrypted Keystore 
	- Protected by Passphrase 
	- Encrypted with AES256 by default.
	- Backup and key distribution is manual 
	- Not Secure if the Passphrase is weak and the wallet files are on the same server.

### 4.2 Configure TDE With Wallet 
	> Note: You need downtime to configure the TDE with Wallet, and below configuration are applicable on RAC Database. 
	> Warning: you need to read oracle documentation for more details. 


==> Using root user install below tool to help you to work easily with sqlplus and other oracle programs and command 
# for linux 
rpm -Uvh ftp://ftp.pbone.net/mirror/archive.fedoraproject.org/epel/8.1.2020-04-22/Everything/x86_64/Packages/r/rlwrap-0.43-5.el8.x86_64.rpm


[A]

=# Using Grid User use `asmcmd` to create asm wallet folder:
	asmcmd mkdir +DATA/wallet
	asmcmd mkdir +DATA/wallet/PROD
	asmcmd mkdir +DATA/wallet/PROD/tde
	asmcmd ls -l +DATA/wallet/PROD


=# Using Oracle user use `sqlplus` to configure wallet:
	show parameter wallet_root
	alter system set WALLET_ROOT="+DATA/wallet/PROD" scope=spfile sid='*';


=# Using oracle user restart Database:
	srvctl stop database -db prod
	srvctl start database -db prod
	
	show parameter wallet_root


[B]

=# Using Oracle user use `sqlplus` to configure the TDE software Keystore Option:
	show parameter tde_configuration
	alter system set TDE_CONFIGURATION="KEYSTORE_CONFIGURATION=FILE" scope=both sid='*';

-- check the PDBs if they are in mount (Not Opened)
	show pdbs 
	alter pluggable database all open [instances=ALL];

-- check the status of the wallet 
	set lines 200
	col WRL_PARAMETER for a25
	col wallet_type for a15
	col STATUS for a15
	select * from GV$ENCRYPTION_WALLET;


[C]

==# below command will create a software keystore, check asm you can find a file ewallet.p12, 
	ADMINISTER KEY MANAGEMENT CREATE KEYSTORE IDENTIFIED BY "welcome1";

-- command to change the wallet password 
	-- ADMINISTER KEY MANAGEMENT ALTER KEYSTORE PASSWORD IDENTIFIED BY 'welcome1' SET 'password1' WITH BACKUP ;

-- check the stats of the wallet
	select * from GV$ENCRYPTION_WALLET;


[D]

==# create a Auto-LOGIN wallet type 
	ADMINISTER KEY MANAGEMENT CREATE AUTO_LOGIN KEYSTORE FROM KEYSTORE IDENTIFIED BY "password1";
	-- ADMINISTER KEY MANAGEMENT CREATE [LOCAL] AUTO_LOGIN KEYSTORE FROM KEYSTORE '+DATA/wallet/PROD/tde' IDENTIFIED BY "password1";


-- check the stats of the wallet (No Master key yet)
	select * from GV$ENCRYPTION_WALLET;


[E]

==# force open the software keystore 
	administer key management set keystore open force keystore identified by "password1" container=all;

- Note : To switch over to opening the password-protected software keystore when an auto-login keystore is configured and is currently open, 
		specify the FORCE KEYSTORE clause as follows.


[F]

==# Set the Keystore TDE Master Key
	administer key management set key FORCE KEYSTORE identified by "password1" with backup Container=all; 

-- check the stats of the wallet
	select WRL_TYPE, WRL_PARAMETER, STATUS, CON_ID from gv$encryption_wallet;


[G]

==# To close the Wallet 
	administer key management set keystore close identified by "password1" container=all; 
	-- ADMINISTER KEY MANAGEMENT SET KEYSTORE CLOSE IDENTIFIED BY Oracle_Key_Vault_password | EXTERNAL STORE CONTAINER = ALL;

==# Remove the Auto Login and back to password wallet type 
--  using grid user use the asmcmd
		cd  +DATA/wallet/PROD/tde/
		cp cwallet.sso ../
		rm cwallet.sso

-- Using oracle sqlplus close/open wallet 
	select * from GV$ENCRYPTION_WALLET;
	alter system set wallet close; 		-- before 12c
	
	select * from GV$ENCRYPTION_WALLET;
	administer key management set keystore open identified by "password1" container=all;  -- after 12c
	administer key management set keystore open force keystore identified by "password1" container=all;
	
	select * from GV$ENCRYPTION_WALLET;
	administer key management set keystore close identified by "password1" container=all;
	

[H]

==# Re-Enable the Auto_Login wallet 
--  using grid user use the asmcmd
	cd  +DATA/wallet/PROD/tde/
	cp  ../cwallet.sso .

-- Open Key store if closed
	select * from GV$ENCRYPTION_WALLET;
	administer key management set keystore open identified by "password1" container=all;  -- after 12c
	

=======================================================
# Below the step to create a master key for the new PDB
=======================================================
= Note: 
	- Multitenant environments: 
		- Keystore in united mode (one Keystore for CDB & PDB5) 
		- Keystore in isolated mode (each PDB has its own keystore)

=# Create PDB
	create pluggable database PDB2 admin user newpdbadmin identified by NewAdPW_12;
	alter pluggable database PDB2 open;

	select p.con_id, p.name, p.open_mode, ew.wrl_type, ew.wallet_type, ew.status 
	from v$pdbs p join v$encryption_wallet ew on (ew.con_id = p.con_id)
	where p.name = 'PDB2';


=# Create MEK for New PDB (united mode)
	alter session set container=pdb2;
	administer key management set key force keystore identified by "MySysPW_12" with backup; 


=====================================
#### 4.2.1 TDE Table-space Encryption 
=====================================

**Note:
 TABLESPACE_ENCRYPTION = { AUTO_ENABLE | MANUAL_ENABLE | DECRYPT_ONLY } - default Cloud databases: AUTO_ENABLE - On-premises databases: MANUAL_ENABLE -- have high preference
   1. AUTO_ENABLE – Enables automatic encryption for tablespaces when encryption is supported.
   2. MANUAL_ENABLE – Requires explicit user action to enable encryption for a tablespace.
   3. DECRYPT_ONLY – Prevents encryption but allows decryption of already encrypted tablespaces.

 ENCRYPT_NEW_TABLESPACES = { CLOUD_ONLY | ALWAYS | DDL } - default CLOUD_ONLY
   1. CLOUD_ONLY (Default) – Encryption is enforced for new tablespaces only when the database is hosted in a cloud environment.
   2. ALWAYS – Encryption is enforced for all newly created tablespaces, regardless of the environment.
   3. DDL – Encryption is applied only when explicitly specified in the CREATE TABLESPACE statement using the ENCRYPTION clause.


=# Online Table space Encryption/Decrypt

-- Create tablespace in PDB database 
alter session set container = prodpdb1;

CREATE TABLESPACE test_ts DATAFILE SIZE 1M;
CREATE TABLE EMPLOYEE (ID NUMBER(5),NAME VARCHAR(42),SALARY NUMBER(10)) TABLESPACE test_ts;

INSERT INTO EMPLOYEE VALUES (001,'JOHN SMITH',15000);
INSERT INTO EMPLOYEE VALUES (002,'SCOTT TIGER',25000);
INSERT INTO EMPLOYEE VALUES (003,'DIANA HAYDEN',35000);

col df_name for a80
col ts_name for a10
select df.name df_name ,ts.name ts_name  from v$datafile df join v$tablespace ts on (df.ts# = ts.ts#);

-- Encrypt the tablespace online
SELECT tablespace_name, encrypted, status FROM dba_tablespaces;
ALTER TABLESPACE test_ts ENCRYPTION ONLINE USING 'AES256' ENCRYPT;

-- Decrypt Online
SELECT tablespace_name, encrypted, status FROM dba_tablespaces;
ALTER TABLESPACE test_ts ENCRYPTION ONLINE DECRYPT;

-- give you more details 
select ts.name , ENCRYPTIONALG, status, ENCRYPTEDTS  from v$encrypted_tablespaces ets join v$tablespace ts on (ets.ts# = ts.ts#)




=# Offline Table space Encyption 

-- Create tablespace in PDB database 
alter session set container = prodpdb1;

CREATE TABLESPACE test_ts DATAFILE SIZE 1M;
col df_name for a80
col ts_name for a10
select df.name df_name ,ts.name ts_name  from v$datafile df join v$tablespace ts on (df.ts# = ts.ts#);

-- Encrypt Tablespace Offline
alter tablespace test_ts offline normal;
SELECT tablespace_name, encrypted, status FROM dba_tablespaces;
ALTER TABLESPACE test_ts ENCRYPTION OFFLINE USING 'AES256' ENCRYPT;
ALTER TABLESPACE test_ts ONLINE;

-- Decrypt Offline
SELECT tablespace_name, encrypted, status FROM dba_tablespaces;
alter tablespace test_ts offline normal;
ALTER TABLESPACE test_ts ENCRYPTION ONLINE DECRYPT;

-- give you more details 
select ts.name , ENCRYPTIONALG, status, ENCRYPTEDTS  from v$encrypted_tablespaces ets join v$tablespace ts on (ets.ts# = ts.ts#



=# Rekey the Tablespace 

-- Check the Encryption algo 
select ts.name , ENCRYPTIONALG, status, ENCRYPTEDTS from v$encrypted_tablespaces ets join v$tablespace ts on (ets.ts# = ts.ts#)

ALTER TABLESPACE test_ts ENCRYPTION USING 'AES192' REKEY;
-- we can add below to preform the file name conversion 
-- FILE_NAME_CONVERT = ('SECURE01.DBF', 'SECURE02.DBF');

-- Check the Encryption algo 
select ts.name , ENCRYPTIONALG, status, ENCRYPTEDTS from v$encrypted_tablespaces ets join v$tablespace ts on (ets.ts# = ts.ts#)




================================
#### 4.2.2 TDE Column Encryption
================================

-- Create user and connection service name 

# using oracle user 
vi $ORACLE_HOME/network/admin/tnsnames.ora
	# paste this inside the tnsnames.ora
	PRODPDB1 =
	  (DESCRIPTION =
		(ADDRESS_LIST =
		  (ADDRESS = (PROTOCOL = TCP)(HOST = ora19c)(PORT = 1521))
		)
		(CONNECT_DATA =
		  (SERVICE_NAME = PRODPDB1.oradomain) # oradomain if the domain added 
		)
	  )

	  
# print out the file contant
cat $ORACLE_HOME/network/admin/tnsnames.ora 


## we can't encrypt the SYS objects you will get below error if you do so 

SQL>  CREATE TABLE sys.customer (
    cust_id      NUMBER,
    cust_name    VARCHAR2(100),
    cust_email   VARCHAR2(50) encrypt no salt,
    cust_phone   NUMBER encrypt,
    cust_address VARCHAR2(3000) encrypt using 'AES256'
  );  2    3    4    5    6    7
    cust_email   VARCHAR2(50) encrypt no salt,
    *
ERROR at line 4:
ORA-28336: cannot encrypt SYS owned objects


# using oracle sqlplus 
CREATE USER tst_user IDENTIFIED BY password DEFAULT TABLESPACE users QUOTA UNLIMITED ON users;
grant connect, resource to tst_user;
grant select any dictionary to tst_user; # this to show the is for seek of demo don't grant it for any normal user this is DBA role 



-- Create Table with encrypted column

  
  **Note: 
		TDE column encrypt by default add salt to the encrypted to make it tough for the stealer to perform Brute forcing attack */


sqlplus tst_user/password@prodpdb1

	 CREATE TABLE customer (
		cust_id      NUMBER,
		cust_name    VARCHAR2(100),
		cust_email   VARCHAR2(50) encrypt,
		cust_phone   NUMBER encrypt,
		cust_address VARCHAR2(3000) encrypt
	  );
  
  -- check the encrypted columns
	  set lines 300
	  col owner for a15
	  col table_name for a15
	  col column_name for a15
	  col ENCRYPTION_ALG for a30
	  SELECT * FROM DBA_ENCRYPTED_COLUMNS;
  
  -- To remove the Salt from the and try different Encryption algorithm 
  
  
  **Note: 
	  All the encrypted columns in a table must use the same encryption algorithm. 
	  If we try to use different encryption algorithms for multiple columns in the same table, we may encounter 
	  ORA-28340: a different encryption algorithm has been chosen for the table exception.
  
  
-- Drop table customer;
  
   CREATE TABLE customer (
    cust_id      NUMBER,
    cust_name    VARCHAR2(100),
    cust_email   VARCHAR2(50) encrypt no salt,
    cust_phone   NUMBER encrypt,
    cust_address VARCHAR2(3000) encrypt using 'AES256'
  );
  
  
  
  
**Note: <IMP>
	The ALTER TABLE command can be used for encrypting columns in an existing table by either adding an encrypted column or by encrypting an already existing column.


-- To add an encrypted column to an existing table in the database
  ALTER TABLE customer ADD (cust_ssn VARCHAR2(11) ENCRYPT USING 'AES256' salt);
  
-- To encrypt an existing column in a table in the database,
  ALTER TABLE customer MODIFY (cust_name encrypt);
  
-- To decrypt an existing column in a table in the database,
  ALTER TABLE customer MODIFY (cust_name decrypt);
  
-- To add SALT to an encrypted column in a table in the database,
  ALTER TABLE customer MODIFY (cust_email encrypt salt);
  
-- To remove SALT from an encrypted column in a table in the database,
  ALTER TABLE customer MODIFY (cust_email encrypt no salt);
  
-- To change the encrypted key for the table containing one or more encrypted column,
  ALTER TABLE customer rekey;
  
-- To change the encryption algorithm for the table containing one or more encrypted column,
  ALTER TABLE customer rekey USING '3DES168';
   
-- We can also use the parameter NOMAC for bypassing the integrity check, thus saving up to 20bytes of disk space per encrypted value.
  ALTER TABLE customer rekey USING '3DES168' 'NOMAC';
  
-- The TDE also adds a Message Authentication Code (MAC) to the data for integrity checking. The default integrity algorithm is SHA-1.
  ALTER TABLE customer rekey USING '3DES168' 'SHA-1';


**Note: <IMP>
	If the encrypted column is being indexed, it must be specified without SALT. 
	If not, we may encounter ORA-28338: cannot encrypt indexed column(s) with salt exception.
     We can't have different encryption algo for different coloum in same table.



##########################
### 4.3 TDE With Vault Key
##########################

To work with Key Vault you need to know few things about it:

- KMIP compliant key management system 
- Subscribe the database to key vault to have a Master key
- Multi-Master up to 16 Nodes in cluster 
- Backup and key distribution is automated  



### 4.4 Configure TDE With Key Vault

> TODO


